[{"/home/demonwolf/WebstormProjects/SPE-final-project/src/index.js":"1","/home/demonwolf/WebstormProjects/SPE-final-project/src/reportWebVitals.js":"2","/home/demonwolf/WebstormProjects/SPE-final-project/src/App.js":"3","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/RegisterScreen.js":"4","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/DisplayServiceProviders.js":"5","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/Payment.js":"6","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/providerscreen.js":"7","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/wait.js":"8","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/RegisterUser.js":"9","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/RegisterServiceProvider.js":"10","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/DisplayComoponent.js":"11","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/status.js":"12","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/Providerchoices.js":"13","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/userselection.js":"14"},{"size":560,"mtime":1620814974102,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1620814974102,"results":"17","hashOfConfig":"16"},{"size":4761,"mtime":1620814973458,"results":"18","hashOfConfig":"16"},{"size":2757,"mtime":1620814973458,"results":"19","hashOfConfig":"16"},{"size":4294,"mtime":1620814973458,"results":"20","hashOfConfig":"16"},{"size":1112,"mtime":1620814973458,"results":"21","hashOfConfig":"16"},{"size":1805,"mtime":1620814974094,"results":"22","hashOfConfig":"16"},{"size":281,"mtime":1620814974094,"results":"23","hashOfConfig":"16"},{"size":3449,"mtime":1620814973458,"results":"24","hashOfConfig":"16"},{"size":4352,"mtime":1620814973458,"results":"25","hashOfConfig":"16"},{"size":2192,"mtime":1620814973458,"results":"26","hashOfConfig":"16"},{"size":1195,"mtime":1620814974094,"results":"27","hashOfConfig":"16"},{"size":1736,"mtime":1620814973458,"results":"28","hashOfConfig":"16"},{"size":2315,"mtime":1620814974094,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zorcco",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/demonwolf/WebstormProjects/SPE-final-project/src/index.js",[],"/home/demonwolf/WebstormProjects/SPE-final-project/src/reportWebVitals.js",[],"/home/demonwolf/WebstormProjects/SPE-final-project/src/App.js",["69","70"],"import 'react-bootstrap'\nimport React from 'react';\nimport './App.css'\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport DisplayServiceProviders from \"./components/DisplayServiceProviders\";\nimport Payment from \"./components/Payment\";\nimport Servp from \"./components/providerscreen\";\nimport Wait from \"./components/wait\"\n\nclass  Welcome extends React.Component{\n    componentWillMount() {\n        this.loadWeb3().then(r => {console.log(\"Connected to metamask\")});\n        this.connectBlockChainData().then(r =>{this.user();});\n\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={currentAccount: 0x0,\n            contract: null,\n            existingUser :null,\n            existingServiceProvider:null,\n            serviceProvidersList :null,\n            msg : false,\n            ong :false,\n\n        };\n    }\n\n    async getUserState (contract){\n        let rvalue = false;\n         await  this.state.contract.methods.userExist( this.state.currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n        this.setState({existingUser:rvalue});\n\n        rvalue = false\n        await  this.state.contract.methods.serviceProviderExist( this.state.currentAccount).call()\n            .then(function (result){\n                rvalue = result;\n            });\n        this.setState({existingServiceProvider:rvalue});\n\n        console.log(rvalue);\n\n    }\n\n\n  async loadWeb3(){\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  async RegisterUser(name, location, email, phone){\n\n        await  this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  this.state.currentAccount}).then(function(result){\n            console.log(result);\n        });\n\n  }\n\n\n\n\n\n  async connectBlockChainData(){\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({currentAccount:accounts[0]});\n    console.log( this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.setState({contract :Model});\n      const x = await Model.methods.getAllUsers().call();\n      const y = await Model.methods.getAllServiceProviders().call();\n      console.log(x);\n      console.log(y);\n      console.log(await Model.methods.ServiceProviders(y[4]).call());\n      let iop = await this.getUserState(this.state.contract);\n    }\n    else{\n      window.alert(\"Please switch to Ropsten Network!!\")\n    }\n  }\n\n    async user()\n    {\n        let v= false;\n        let alert = false;\n        let s=false;\n        await this.state.contract.methods.Users(this.state.currentAccount).call()\n            .then(function(result){\n                v= result.serv;\n                alert = result.messagealert;\n                console.log(alert);\n                s=result.ongiong_service;\n\n            });\n        this.setState({sp :v});\n        this.setState({msg:alert});\n        this.setState({ong:s});\n    }\n\n  RegisterScreenLoader(x, y){\n\n    if( x === true || y === true)\n        if(x === true){\n            if(this.state.sp=== true){\n                if(this.state.msg === true){\n                    return <DisplayServiceProviders Account = {this.state.currentAccount}  Contract={this.state.contract} flag = {this.state.msg}/>\n                }\n                else {\n                    if(this.state.ong==true)\n                        return <Payment contract= {this.state.contract} account ={this.state.currentAccount}/>\n                    else\n                        return <Wait/>\n                }\n            }\n            else {\n                return <DisplayServiceProviders Account = {this.state.currentAccount}  Contract={this.state.contract} flag = {this.state.msg}/>} }\n        else return <Servp Account={this.state.currentAccount}  Contract={this.state.contract}/>\n    else\n        return <RegisterScreen Account ={ this.state.currentAccount}  Contract = { this.state.contract} />\n  }\n\n  render() {\n      return (\n\n          <div className=\"App\">\n\n              {\n\n                  this.RegisterScreenLoader(this.state.existingUser,this.state.existingServiceProvider)\n              }\n\n          </div>);\n  }\n\n}\n\nexport default Welcome;\n","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/RegisterScreen.js",["71","72","73","74","75","76","77","78","79"],"import React from \"react\";\nimport '../css/RegisterScreen.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport RegisterUser from \"./RegisterUser\";\nimport bubbles from \"./images/bubble.png\"\nimport panda from \"./images/panda.png\"\nimport RegisterServiceProvider from \"./RegisterServiceProvider\";\nimport {withRouter} from \"react-router\";\n\nconst RegisterScreen = ({Account, Contract}) => {\n\n\n    return(\n        <div class = \"hero\">\n            <nav className=\"navbar navbar-light bg-light\" style={{background: \"orange\", height : \"30px\", fontSize : \"20px\"}}>\n                <div className=\"container-fluid\">\n                    <a className=\"navbar-brand\" href=\"/\" >Home</a>\n                </div>\n            </nav>\n            <Router>\n\n                <div class = \"hero\">\n                    <h2>\n                    <div class = \"panda\">Welcome to<br></br><img src={panda}></img><br></br> Your Helper</div>\n                    <br></br>\n                    </h2>\n                    <ul>\n                        <div style={{background: \"red\", padding: \"10px\"}}>\n                            <li>\n                                Please click below to choose your category:<br></br><br></br>\n                            </li>\n                        </div>\n                        <br></br>\n                        <li ><Link to=\"/registeruser\" activeStyle = {{color : \"red\"}}><button class =\"button\" >User</button></Link>\n                            <br></br>\n                            <br></br>\n                        </li>\n\n\n                        <li class = \"button\"><Link to = \"/registersp\">\n                            <button className=\"button\">Service Provider</button></Link>\n\n                        </li>\n\n                    </ul>\n                    <div className=\"bubbles\">\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                        <img src={bubbles}/>\n                    </div>\n\n                    <Switch>\n                        <Route path=\"/registeruser\">\n                            <RegisterUser Account={Account} contract ={Contract}/>\n                        </Route>\n                        <Route path = \"/registersp\">\n                            <RegisterServiceProvider Account={Account} contract ={Contract}/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n\n\n        </div>\n    )\n}\n\nexport default withRouter(RegisterScreen);","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/DisplayServiceProviders.js",["80","81","82","83","84"],"import React, {useEffect} from \"react\";\nimport 'react-bootstrap';\nimport {useState} from 'react';\nimport DisplayComponent from \"./DisplayComoponent\";\nimport \"../css/RegisterScreen.css\"\nimport panda from \"./images/panda.png\";\n\nclass DisplayServiceProviders extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state ={service_providers:null,\n        type_of_sp:1,\n        isSubmitted:false,\n        list_of_selected_sp: []};\n\n    }\n\n    onChange = async(e) =>{\n        let x = null;\n        this.setState({type_of_sp:e.target.value});\n        x = await this.props.Contract.methods.getAllServiceProviders().call();\n        this.setState({service_providers : x});\n        console.log(this.state.service_providers);\n\n    }\n\n    check_service_Cancelled =  async() =>{\n\n    }\n\n    onSubmit = async (e) => {\n        e.preventDefault()\n        let i =0;\n        let x = null;\n        let z = [];\n        for(;i<this.state.service_providers.length; ++i){\n            let x = await this.props.Contract.methods.ServiceProviders(this.state.service_providers[i]).call()\n            if(x.service_type === this.state.type_of_sp && x.status === true)\n                z.push(x)\n        }\n        this.setState({list_of_selected_sp:z })\n        console.log(z);\n\n    }\nrender() {\n        document.title = \"Select Provider\";\n        if (this.props.flag === false) {\n        return (\n            <div class=\"hero\">\n                <h2>\n                    <div className=\"panda\"><img src={panda}></img><br></br> Your Helper</div>\n                    <br></br>\n                </h2>\n                <form onSubmit={this.onSubmit}>\n                    <label id={\"service_type\"}>Choose the service category :</label>\n                    <select id=\"service_type\" style={{\n                        width: 400, height: 30, background: \"yellow\",\n                        margin: 30\n                    }} onChange={this.onChange} required>\n                        <option value={\"\"}></option>\n                        <option value={1}>Carpentry</option>\n                        <option value={2}>Plumbing</option>\n                        <option value={3}>Painting</option>\n                        <option value={4}>Electrical</option>\n                    </select>\n\n                    <button>Find</button>\n                </form>\n\n                {this.state.list_of_selected_sp.length === 0 ?\n                    <h4>No service provider for selected category.</h4> : <h2></h2>\n                }\n\n                <div>\n                    {\n\n                        this.state.list_of_selected_sp.map((sp, index) => (<div key={index}>\n\n                            <div className='users'>\n                                <DisplayComponent sp={sp} contract={this.props.Contract} account={this.props.Account}/>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div class=\"hero\">\n                <h1>service provider denied your request</h1>\n                <form onSubmit={this.onSubmit}>\n                    <label id={\"service_type\"}>Choose the service category :</label>\n                    <select id=\"service_type\" style={{\n                        width: 400, height: 30, background: \"yellow\",\n                        margin: 30\n                    }} onChange={this.onChange} required>\n                        <option value={\"\"}></option>\n                        <option value={1}>Carpentry</option>\n                        <option value={2}>Plumbing</option>\n                        <option value={3}>Painting</option>\n                        <option value={4}>Electrical</option>\n                    </select>\n\n                    <button>Find</button>\n                </form>\n                <div>\n                    {this.state.list_of_selected_sp.map((sp, index) => (<div key={index}>\n\n                            <div className='users'>\n                                <DisplayComponent sp={sp} contract={this.props.Contract} account={this.props.Account}/>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>)\n    }\n}\n\n}\n\nexport default DisplayServiceProviders;","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/Payment.js",["85","86"],"\nimport React from 'react'\nimport payment from './images/payment.png';\nimport panda from \"./images/panda.png\";\nclass  Payment extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state ={account:this.props.account, contract : this.props.contract};\n    }\n\n    onClick = async (e) => {\n        e.preventDefault();\n        await this.state.contract.methods.servicecompleted().send({from:this.state.account});\n        alert('paid');\n        window.location.reload(false);\n\n\n    }\n    render(){\n\n        return (\n            <div class = \"hero\">\n                <h2>\n                    <div className=\"panda\">Welcome to<br></br><img src={panda}></img><br></br> Your Helper</div>\n                    <br></br>\n                </h2>\n                <h2>CAUTION: Click only if the service is completed. </h2>\n                <br></br>\n                <br></br>\n                <br></br>\n                <br></br>\n                <button onClick={this.onClick} height= \"100%\"> click on this to pay to the service provider </button>\n\n            </div>\n        )}\n}\n\nexport default Payment","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/providerscreen.js",["87","88"],"import React from \"react\";\nimport '../css/RegisterScreen.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Status from \"./status\";\nimport Provider from \"./Providerchoices\";\nimport * as PropTypes from \"prop-types\";\nimport panda from \"./images/panda.png\";\n\n\nStatus.propTypes = {};\nconst providerscreen = ({Account, Contract}) => {\n    document.title = \"Service Provider Screen\";\n    return(\n\n        <Router>\n            <div class={\"hero\"}>\n                <h2>\n                    <div className=\"panda\">Welcome to<br></br><img src={panda}></img><br></br> Your Helper</div>\n                    <br></br>\n                </h2>\n                <ul><br></br>\n                    <li>\n                        <br></br><br></br>\n                        <h2>What you want to do:</h2><br></br>\n                    </li>\n                    <li>\n                        <Link to=\"/status\"><button class =\"button\">Change the Status</button></Link>\n                    </li>\n                    <li>\n                        <Link to = \"/user\"><br></br><br></br>\n                            <button class=\"button\">Select the User</button></Link>\n                    </li>\n\n                </ul>\n\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n\n                    <Route path=\"/status\">\n                        <Status contract ={Contract} account={Account}/>\n                    </Route>\n                    <Route path = \"/user\">\n                        <Provider contract ={Contract} account={Account} />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default providerscreen;","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/wait.js",["89"],"import React from 'react'\nimport wai from './images/wait.jpg';\nconst wait = () => {\n    document.title = \"Wait\";\n    return (\n        <div>\n            <div>\n                <img src={wai}  width= \"100%\" height=\"60%\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default wait","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/RegisterUser.js",["90","91","92","93","94","95","96","97","98","99"],"import React, {Component, useState} from \"react\";\nimport '../css/RegisterScreen.css'\nimport validator from 'validator'\nimport {withRouter} from \"react-router\";\nimport bubbles from \"./images/bubble.png\";\n\nclass RegisterUser extends Component{\n\n\n    constructor(props) {\n        super(props);\n        this.state={emailError: '', phoneError :'', userAccount :this.props.Account, contract:this.props.contract};\n\n    }\n\n    validateEmail(e){\n        let email = e.target.value;\n\n        if (validator.isEmail(email)) {\n            this.setState({emailError : 'Valid Email!'});\n        }\n        else {\n            this.setState({emailError : 'Enter valid Email!'});\n        }\n    }\n\n    validatePhoneNumber(e){\n        const number = e.target.value;\n        const isValidPhoneNumber = validator.isMobilePhone(number, 'en-IN')\n        if(isValidPhoneNumber){\n            this.setState({phoneError :'Valid Phone!'});\n        }\n        else {\n            this.setState({phoneError : \"Invalid Phone Number\"});\n        }\n    }\n\n    onsubmit = async(e)=>{\n\n        e.preventDefault();\n        const name = e.target.elements.full_name.value;\n        const home = e.target.elements.home.value;\n        const location = e.target.elements.location.value;\n        const email = e.target.elements.email.value;\n        const phone = e.target.elements.phone.value;\n        const address= e.target.elements.userAddress.value;\n        await this.props.contract.methods.addUser(name,home,location, email,phone).send({from : address}).then(function(result){\n            console.log(\"Function succesfully terminated\");\n        });\n        window.location.reload(false);\n\n    }\n    render(){\n        document.title = \"User Registration\";\n    return(\n        <div color= \"lightblue\">\n            <form onSubmit={this.onsubmit}><br></br>\n                <h1>Sign Up for User</h1><br></br>\n                <input type =\"text\"  name = \"userAddress\" readOnly={true} value={this.state.userAccount = this.props.Account} disabled={true}/><br></br><br></br>\n                <input type=\"text\" placeholder=\"Enter full name\" name=\"full_name\"   required/><br></br><br></br>\n                <input type=\"text\" placeholder=\"Enter Home adddress\" name=\"home\"   required/><br></br><br></br>\n                <input type=\"text\" placeholder=\"Enter City\" name=\"location\" required/><br></br><br></br>\n                <input type=\"text\" name=\"email\" placeholder=\"Enter Email\"\n    onChange={(e) => this.validateEmail(e)}/> <br/>\n                <span style={{\n                    fontWeight: 'bold',\n                    color: 'red',\n                }}>{this.state.emailError}</span><br></br>\n                <input type=\"text\" name=\"phone\" placeholder=\"Enter Phone\"\n    onChange={(e) => this.validatePhoneNumber(e)}/> <br/>\n                <span style={{\n                    fontWeight: 'bold',\n                    color: 'red',\n                }}>{this.state.phoneError}</span><br></br>\n                <button className=\"btn btn-primary mt-2 btn-sm w-50\">Sign Up</button>\n            </form>\n            <div className=\"bubbles\">\n                <img src={bubbles}/>\n                <img src={bubbles}/>\n                <img src={bubbles}/><img src={bubbles}/>\n                <img src={bubbles}/>\n                <img src={bubbles}/>\n                <img src={bubbles}/>\n                <img src={bubbles}/>\n\n\n            </div>\n        </div>\n    )}\n}\n\nexport default withRouter(RegisterUser);","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/RegisterServiceProvider.js",["100","101","102","103"],"import React from \"react\";\nimport 'react-bootstrap';\nimport {useState} from 'react';\nimport validator from \"validator\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {withRouter, Redirect} from 'react-router-dom'\n\n\nconst RegisterServiceProvider = ({Account, contract}) =>{\n    let [typeservice,setType] = useState(0x0);\n    let [emailError,setEmailError] = useState('');\n    let [phoneError,setPhoneError] = useState('');\n    let [navigate,setNavigate] = useState(false);\n    document.title = \"Service Provider Registration\";\n    const onChange = (e) => {\n        if(e.target.value == \"default\"){\n            setType(Number(0));}\n        else\n            console.log(typeservice);\n        setType(e.target.value);\n    }\n    const validateEmail= (e)=>{\n        let email = e.target.value;\n\n        if (validator.isEmail(email)) {\n            setEmailError(\"Valid Email!\");\n        }\n        else {\n            setEmailError( \"Enter valid Email!\");\n        }\n    }\n\n    const validatePhoneNumber = (e)=>{\n        const number = e.target.value;\n        const isValidPhoneNumber = validator.isMobilePhone(number, 'en-IN')\n        if(isValidPhoneNumber){\n            setPhoneError(\"Valid Phone!\");\n        }\n        else {\n            setPhoneError(\"Invalid Phone!\");\n        }\n    }\n\n    const nextPage = () =>{\n        if(navigate === true)\n            return <Redirect to=\"/\" push={true} />\n    }\n\n    const onsubmit = async(e)=>{\n        e.preventDefault();\n        const name = e.target.elements.full_name.value;\n        const location = e.target.elements.location.value;\n        const email = e.target.elements.email.value;\n        const phone = e.target.elements.phone.value;\n        const address= e.target.elements.spAddress.value;\n        const sp_type = typeservice;\n        const charges=e.target.elements.charges.value * Math.pow(10,18);\n       await contract.methods.addServiceProvider(name,location, email,phone, charges, sp_type).send({from : address}).then(function(result){\n            console.log(\"The funciton was succesfully terminated\");\n        });\n        window.location.reload(false);\n\n\n\n        //console.log(name+ location+ email+ phone+ address+ sp_type+ charges);\n\n    }\n\n    return(\n        <div className=\"container\" color= \"lightblue\">\n            <form onSubmit={onsubmit}>\n                <h1>Sign Up for Service Provider</h1><br></br><br></br>\n                <input type =\"text\"  name = \"spAddress\" readOnly={true}  disabled={true} value={Account}/><br></br><br></br>\n                <input type=\"text\" placeholder=\"Enter full name\" name=\"full_name\"   required/><br></br><br></br>\n                <input type=\"text\" placeholder=\"Enter Home adddress\" name=\"home\"   required/><br></br><br></br>\n                <input type=\"text\" placeholder=\"Enter City\" name=\"location\" required/><br></br><br></br>\n                <input type=\"text\" name=\"email\" placeholder=\"Enter Email\"\n                       onChange={(e) => validateEmail(e)}/> <br/><br></br><br></br>\n                <span style={{\n                    fontWeight: 'bold',\n                    color: 'red',\n                }}>{emailError}</span>\n                <input type=\"text\" name=\"phone\" placeholder=\"Enter Phone\"\n                       onChange={(e) => validatePhoneNumber(e)}/> <br/><br></br><br></br>\n                <span style={{\n                    fontWeight: 'bold',\n                    color: 'red',\n                }}>{phoneError}</span>\n                <label id =\"service_type\" >Choose Service Type:</label>\n                <select id=\"service_type\" className=\"form-control\"  onChange={onChange} required>\n                    <option value = {0}>Select</option>\n                    <option value = {1}>Carpentry</option>\n                    <option value = {2}>Plumbing</option>\n                    <option value={3}>Painting</option>\n                    <option value ={4}>Electrical</option>\n                </select>\n                <br></br><br></br>\n                <label id =\"wei\" >Enter Charges(in ETH):</label>\n                <input type=\"number\" id =\"wei\" step=\"any\" placeholder={\"Enter the charges in ETH.\"} name=\"charges\" /><br></br><br></br>\n                <button className=\"btn btn-primary mt-2 btn-sm w-50\">Sign Up</button>\n            </form>\n\n\n        </div>\n    )\n}\n\nexport default withRouter(RegisterServiceProvider);","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/DisplayComoponent.js",["104"],"import React from \"react\";\nimport 'react-bootstrap';\nimport Payment from \"./Payment\";\nimport \"../css/table.css\"\nimport '../css/RegisterScreen.css'\nconst green = '#FFd177';\nconst yellow = '#39D1B4';\n\nclass DisplayComponent extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {submitted: false,color: green, contract: this.props.contract };\n        this.changeColor = this.changeColor.bind(this);\n\n    }\n    changeColor(){\n        const newColor = this.state.color === green ? yellow : green;\n        this.setState({ color: newColor })\n    }\n\n    onSubmit = async(e) => {\n        e.preventDefault();\n        console.log(this.props.sp.Address);\n        console.log(this.props.account);\n        console.log(this.props.sp.charges);\n        await this.state.contract.methods.requestService(this.props.sp.Address)\n            .send({from: this.props.account, value: this.props.sp.charges});\n        console.log(\"pressed\");\n        this.setState({submitted:true})\n        window.location.reload(false);\n\n    }\n    render(){\n        document.title = \"Select Service Provider\";\n        return(\n            <div class>\n                <br></br>\n                <br></br>\n                <form onSubmit={this.onSubmit}>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Charges :{this.props.sp.charges}</th>\n                            <th colSpan=\"2\">{this.props.sp.name}<br></br> {this.props.sp.city}</th>\n                        </tr>\n                        </thead>\n                    </table><table style={{'border' : \"black\" }}>\n                    <tbody>\n                    <tr>\n                        <td>{this.props.sp.phone}</td>\n                        <td>{this.props.sp.email    }</td>\n                        <td bgcolor={\"red\"}><button onClick={this.changeColor} hidden={this.state.submitted? \"true\":\"\"}>Place Request for Service</button></td>\n                    </tr>\n                    <tr>\n\n                    </tr>\n                    </tbody>\n\n                </table>\n                </form>\n\n            </div>\n\n        ) }\n}\n\n\n\nexport default DisplayComponent;","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/status.js",["105","106"],"import {withRouter} from \"react-router\";\nimport React, {Component, useLayoutEffect, useState} from \"react\";\n\nclass status extends Component{\n\n    constructor(props){\n        super(props);\n        this.state ={account:this.props.account, contract : this.props.contract, Stat:null}\n        this.getStatus().then(r => {console.log(\"Completed\")});\n    }\n    getStatus = async () =>{\n        let x = await this.props.contract.methods.ServiceProviders(this.state.account).call();\n        if(x.status === true)\n            this.setState({Stat: \"Online\"});\n        else\n            this.setState({Stat: \"Offline\"})\n        console.log(this.state.Stat);\n\n    }\n    shoot=async(e)=> {\n        e.preventDefault();\n        await this.props.contract.methods.service_off().send({from:this.state.account});\n        window.location.reload(false);\n\n    }\n    render(){\n        document.title = \"Now \" + this.state.Stat;\n        return (\n            <div>\n                <br></br><br></br>\n                <button onClick={this.shoot} style={{width:\"100%\",background: \"yellow\", borderRadius :\"1px\"}}> Current Status :{this.state.Stat} </button>\n            </div>\n        )}\n}\n\nexport default withRouter(status);","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/Providerchoices.js",["107","108","109","110"],"import React from 'react'\nimport 'react-bootstrap';\nimport \"../css/table.css\"\nimport '../css/RegisterScreen.css'\nimport User from \"./userselection\"\nconst green = '#FFd177';\nconst yellow = '#39D1B4';\n\n\n\nclass Providerchoices extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state={ contract :this.props.contract,\n            account : this.props.account,\n            list:[]\n\n\n\n        };\n\n\n    }\n\n    componentWillMount(){\n        this.loc()\n\n    }\n\n\n    loc= async()=>{\n        let v;\n        v = await this.state.contract.methods.return_my_users(this.state.account).call();\n        console.log(v);\n        let i=0;\n        let x=null;\n        let z=[];\n        for(;i<v.length;i++){\n            await this.state.contract.methods.Users(v[i]).call()\n                .then(function (result){\n                    x = result;\n                    z.push(x);\n                });\n\n        }\n        this.setState({list:z});\n        console.log(this.state.list);\n\n    }\n\n\n\n\n    render(){\n        document.title = \"Select the User\";\n        if (this.state.list === []){\n            return <h1> sorry no requests for now</h1>}\n            else\n        {\n        return (\n\n            <div class>\n                <br></br>\n                git {this.state.list.length === 0 ? <h6>No user requests for now</h6>: <h2></h2>}\n\n\n                { this.state.list.map((sp,index)=>(<div key={index}>\n                        <div className='users'>\n                            <User sp ={sp} contract ={this.state.contract} account = {this.state.account}/>\n                        </div>\n                    </div>\n                ))}\n\n            </ div>\n        )}\n    }\n\n\n\n\n}\n\n\n\n\n\n\n\n\nexport default Providerchoices;","/home/demonwolf/WebstormProjects/SPE-final-project/src/components/userselection.js",[],{"ruleId":"111","severity":1,"message":"112","line":92,"column":11,"nodeType":"113","messageId":"114","endLine":92,"endColumn":14},{"ruleId":"115","severity":1,"message":"116","line":126,"column":38,"nodeType":"117","messageId":"118","endLine":126,"endColumn":40},{"ruleId":"119","severity":1,"message":"120","line":29,"column":61,"nodeType":"121","endLine":29,"endColumn":78},{"ruleId":"119","severity":1,"message":"120","line":52,"column":25,"nodeType":"121","endLine":52,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":53,"column":25,"nodeType":"121","endLine":53,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":54,"column":25,"nodeType":"121","endLine":54,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":55,"column":25,"nodeType":"121","endLine":55,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":56,"column":25,"nodeType":"121","endLine":56,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":57,"column":25,"nodeType":"121","endLine":57,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":58,"column":25,"nodeType":"121","endLine":58,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":59,"column":25,"nodeType":"121","endLine":59,"endColumn":45},{"ruleId":"111","severity":1,"message":"122","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"123","line":3,"column":9,"nodeType":"113","messageId":"114","endLine":3,"endColumn":17},{"ruleId":"111","severity":1,"message":"124","line":35,"column":13,"nodeType":"113","messageId":"114","endLine":35,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":52,"column":44,"nodeType":"121","endLine":52,"endColumn":61},{"ruleId":"125","severity":1,"message":"126","line":72,"column":75,"nodeType":"121","endLine":72,"endColumn":79},{"ruleId":"111","severity":1,"message":"127","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":15},{"ruleId":"119","severity":1,"message":"120","line":25,"column":63,"nodeType":"121","endLine":25,"endColumn":80},{"ruleId":"111","severity":1,"message":"128","line":11,"column":13,"nodeType":"113","messageId":"114","endLine":11,"endColumn":22},{"ruleId":"119","severity":1,"message":"120","line":23,"column":63,"nodeType":"121","endLine":23,"endColumn":80},{"ruleId":"119","severity":1,"message":"120","line":8,"column":17,"nodeType":"121","endLine":8,"endColumn":61},{"ruleId":"111","severity":1,"message":"123","line":1,"column":27,"nodeType":"113","messageId":"114","endLine":1,"endColumn":35},{"ruleId":"129","severity":1,"message":"130","line":59,"column":82,"nodeType":"131","messageId":"132","endLine":59,"endColumn":92},{"ruleId":"119","severity":1,"message":"120","line":78,"column":17,"nodeType":"121","endLine":78,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":79,"column":17,"nodeType":"121","endLine":79,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":80,"column":17,"nodeType":"121","endLine":80,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":80,"column":37,"nodeType":"121","endLine":80,"endColumn":57},{"ruleId":"119","severity":1,"message":"120","line":81,"column":17,"nodeType":"121","endLine":81,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":82,"column":17,"nodeType":"121","endLine":82,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":83,"column":17,"nodeType":"121","endLine":83,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":84,"column":17,"nodeType":"121","endLine":84,"endColumn":37},{"ruleId":"111","severity":1,"message":"133","line":5,"column":9,"nodeType":"113","messageId":"114","endLine":5,"endColumn":22},{"ruleId":"111","severity":1,"message":"134","line":13,"column":19,"nodeType":"113","messageId":"114","endLine":13,"endColumn":30},{"ruleId":"115","severity":1,"message":"116","line":16,"column":27,"nodeType":"117","messageId":"118","endLine":16,"endColumn":29},{"ruleId":"111","severity":1,"message":"135","line":44,"column":11,"nodeType":"113","messageId":"114","endLine":44,"endColumn":19},{"ruleId":"111","severity":1,"message":"136","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":15},{"ruleId":"111","severity":1,"message":"137","line":2,"column":27,"nodeType":"113","messageId":"114","endLine":2,"endColumn":42},{"ruleId":"111","severity":1,"message":"123","line":2,"column":44,"nodeType":"113","messageId":"114","endLine":2,"endColumn":52},{"ruleId":"111","severity":1,"message":"138","line":6,"column":7,"nodeType":"113","messageId":"114","endLine":6,"endColumn":12},{"ruleId":"111","severity":1,"message":"139","line":7,"column":7,"nodeType":"113","messageId":"114","endLine":7,"endColumn":13},{"ruleId":"140","severity":1,"message":"141","line":41,"column":23,"nodeType":"142","messageId":"143","endLine":44,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":65,"column":88,"nodeType":"121","endLine":65,"endColumn":92},"no-unused-vars","'iop' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'x' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'payment' is defined but never used.","'PropTypes' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'BrowserRouter' is defined but never used.","'setNavigate' is assigned a value but never used.","'nextPage' is assigned a value but never used.","'Payment' is defined but never used.","'useLayoutEffect' is defined but never used.","'green' is assigned a value but never used.","'yellow' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'x', 'x'.","FunctionExpression","unsafeRefs"]