{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport 'react-bootstrap';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Welcome() {\n  _s();\n\n  let [currentAccount, setCurrentAccount] = useState(0x0);\n  let [contract, setContract] = useState(null);\n  let [existingUser, setExistingUser] = useState(null);\n  useEffect(() => {\n    loadWeb3().then(r => {\n      console.log(\"verified the browser support for ehtereum\");\n    });\n    connectBlockChainData().then(r => {\n      console.log(\"Data fecthed from blockchain\");\n    });\n  }, []);\n\n  const getUserState = async () => {\n    let count = 0;\n\n    while (count !== 100000000) {\n      count++;\n    }\n\n    let rvalue = true;\n    await contract.methods.userExist(currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    return rvalue;\n  };\n\n  const addUser = async (name, location, email, phone) => {\n    console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\");\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    });\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  };\n\n  const RegisterUser = async (name, location, email, phone) => {\n    let count = 0;\n\n    while (count !== 100000) {\n      count++;\n    }\n\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  };\n\n  const connectBlockChainData = async () => {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    setCurrentAccount(accounts[0]);\n    console.log(accounts[0]);\n    console.log(currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      setContract(Model);\n      const x = await Model.methods.getAllUsers().call();\n      console.log(contract);\n      console.log(x);\n      let z = await Model.methods.Users(x[0]).call();\n      console.log(z);\n      await setExistingUser(await getUserState());\n      console.log(existingUser);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  };\n\n  const RegisterScreenLoader = () => {\n    if (existingUser == true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: currentAccount,\n      Contract: contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: RegisterScreenLoader()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Welcome, \"oMkVlQEbcYpvl1GyvJ5DxzGResU=\");\n\n_c = Welcome;\nexport default Welcome;\n\nvar _c;\n\n$RefreshReg$(_c, \"Welcome\");","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useState","useEffect","Web3","ModelABI","RegisterScreen","Welcome","currentAccount","setCurrentAccount","contract","setContract","existingUser","setExistingUser","loadWeb3","then","r","console","log","connectBlockChainData","getUserState","count","rvalue","methods","userExist","call","result","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","x","getAllUsers","z","Users","RegisterScreenLoader"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\n\nfunction Welcome(){\n    let [currentAccount, setCurrentAccount] = useState(0x0);\n    let [contract, setContract] = useState(null);\n    let [existingUser, setExistingUser] = useState(null);\n\n    useEffect(() => {\n        loadWeb3().then(r=>{console.log(\"verified the browser support for ehtereum\")})\n        connectBlockChainData().then(r => {console.log(\"Data fecthed from blockchain\")})\n    },[]);\n\n    const getUserState = async()=>{\n        let count =0;\n        while(count !== 100000000){\n            count ++;\n        }\n        let rvalue = true;\n        await  contract.methods.userExist( currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n      return rvalue;\n    }\n\n  const addUser = async(name, location, email, phone)=>{\n\n        console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\")\n        await  contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  currentAccount});\n\n}\n\n\n  const loadWeb3 = async() => {\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  const RegisterUser = async(name, location, email, phone) =>{\n        let count =0;\n        while(count !== 100000){\n            count ++;\n        }\n        await  contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  currentAccount}).then(function(result){\n            console.log(result);\n        });\n  }\n\n\n\n  const connectBlockChainData = async()=>{\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n     setCurrentAccount(accounts[0])\n    console.log(accounts[0]);\n    console.log( currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      setContract(Model);\n      const x = await Model.methods.getAllUsers().call();\n      console.log(contract);\n      console.log(x);\n      let z = await Model.methods.Users(x[0]).call();\n      console.log(z)\n      await setExistingUser(await  getUserState());\n      console.log( existingUser);\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  const RegisterScreenLoader = ()=>{\n    if( existingUser == true)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={ currentAccount}  Contract = { contract} />\n\n  }\n\n    return (\n\n        <div className=\"App\">\n            {\n                RegisterScreenLoader()\n            }\n        </div>);\n\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}