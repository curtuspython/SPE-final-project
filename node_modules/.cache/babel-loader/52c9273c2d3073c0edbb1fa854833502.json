{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport 'react-bootstrap';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Welcome() {\n  _s();\n\n  useEffect(() => {\n    loadWeb3().then(r => {\n      console.log(\"verified the browser support for ehtereum\");\n    });\n    connectBlockChainData().then(r => {\n      console.log(\"Data fecthed from blockchain\");\n    });\n  }, []);\n\n  const getUserStare = async () => {\n    let rvalue = true;\n    await this.contract.methods.userExist(this.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    return rvalue;\n  };\n\n  const addUser = async (name, location, email, phone) => {\n    console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\");\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.currentAccount\n    });\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  };\n\n  const RegisterUser = async (name, location, email, phone) => {\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  };\n\n  const connectBlockChainData = async () => {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(this.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.contract = Model; //const x = await Model.methods.getAllUsers().call()\n\n      console.log(this.contract); //console.log(x);\n\n      this.existingUser = await this.getUserState();\n      console.log(this.existingUser);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  };\n\n  const RegisterScreenLoader = () => {\n    if (this.existingUser === true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.currentAccount,\n      Register: this.RegisterUser,\n      contract: this.contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  };\n\n  render();\n  {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(Welcome, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Welcome;\nexport default Welcome;\n\nvar _c;\n\n$RefreshReg$(_c, \"Welcome\");","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useState","useEffect","Web3","ModelABI","RegisterScreen","Welcome","loadWeb3","then","r","console","log","connectBlockChainData","getUserStare","rvalue","contract","methods","userExist","currentAccount","call","result","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","existingUser","getUserState","RegisterScreenLoader","render","renderAuthButton"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\n\nfunction Welcome(){\n    useEffect(() => {\n        loadWeb3().then(r=>{console.log(\"verified the browser support for ehtereum\")})\n        connectBlockChainData().then(r => {console.log(\"Data fecthed from blockchain\")})\n    },[]);\n\n    const getUserStare = async()=>{\n        let rvalue = true;\n        await this.contract.methods.userExist(this.currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n      return rvalue;\n    }\n\n  const addUser = async(name, location, email, phone)=>{\n\n        console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\")\n        await this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : this.currentAccount});\n\n}\n\n\n  const loadWeb3 = async() => {\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  const RegisterUser = async(name, location, email, phone) =>{\n    await this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : this.currentAccount}).then(function(result){\n            console.log(result);\n        });\n  }\n\n\n\n  const connectBlockChainData = async()=>{\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(this.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.contract = Model;\n      //const x = await Model.methods.getAllUsers().call()\n      console.log(this.contract);\n      //console.log(x);\n      this.existingUser =await this.getUserState();\n      console.log(this.existingUser);\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  const RegisterScreenLoader = ()=>{\n    if(this.existingUser === true)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={this.currentAccount} Register={this.RegisterUser} contract = {this.contract} />\n\n  }\n  render()\n{\n    return (\n\n        <div className=\"App\">\n            {\n                this.renderAuthButton()\n            }\n        </div>);\n}\n\n\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}