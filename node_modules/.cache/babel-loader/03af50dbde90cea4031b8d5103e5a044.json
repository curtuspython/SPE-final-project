{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\";\nimport 'react-bootstrap';\nimport React from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Welcome extends React.Component {\n  componentWillMount() {\n    this.loadWeb3().then(r => {\n      console.log(\"Connected to metamask\");\n    });\n    this.connectBlockChainData().then(r => {\n      console.log(\"data from blockchain now in our program\");\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAccount: 0x0,\n      contract: null,\n      existingUser: null\n    };\n  }\n\n  async getUserState(contract) {\n    let rvalue = false;\n    await this.state.contract.methods.userExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingUser: rvalue\n    });\n    console.log(rvalue);\n    return rvalue;\n  }\n\n  async addUser(name, location, email, phone) {\n    await this.state.contract.methods.addUser(name, location, email, phone).send({\n      from: this.state.currentAccount\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async RegisterUser(name, location, email, phone) {\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.state.currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  }\n\n  async connectBlockChainData() {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      currentAccount: accounts[0]\n    });\n    console.log(accounts[0]);\n    console.log(this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.setState({\n        contract: Model\n      });\n      const x = await Model.methods.getAllUsers().call();\n      console.log(this.state.contract);\n      console.log(x);\n      let z = await Model.methods.Users(x[0]).call();\n      console.log(z);\n      let iop = await this.getUserState(this.state.contract);\n      this.setState({\n        existingUser: iop\n      });\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  }\n\n  RegisterScreenLoader() {\n    if (this.state.existingUser === false) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.state.currentAccount,\n      Contract: this.state.contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.RegisterScreenLoader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Welcome;","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","Web3","ModelABI","RegisterScreen","Welcome","Component","componentWillMount","loadWeb3","then","r","console","log","connectBlockChainData","constructor","props","state","currentAccount","contract","existingUser","getUserState","rvalue","methods","userExist","call","result","setState","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","x","getAllUsers","z","Users","iop","RegisterScreenLoader","render"],"mappings":";AAAA,OAAO,iBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;;AAGA,MAAOC,OAAP,SAAuBJ,KAAK,CAACK,SAA7B,CAAsC;AAClCC,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,QAAL,GAAgBC,IAAhB,CAAqBC,CAAC,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAAqC,KAAhE;AACA,SAAKC,qBAAL,GAA6BJ,IAA7B,CAAkCC,CAAC,IAAG;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AAAuD,KAA9F;AACH;;AAEDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AAACC,MAAAA,cAAc,EAAE,GAAjB;AAAsBC,MAAAA,QAAQ,EAAE,IAAhC;AAAsCC,MAAAA,YAAY,EAAE;AAApD,KAAX;AACH;;AAEiB,QAAZC,YAAY,CAAEF,QAAF,EAAW;AACzB,QAAIG,MAAM,GAAG,KAAb;AACC,UAAO,KAAKL,KAAL,CAAWE,QAAX,CAAoBI,OAApB,CAA4BC,SAA5B,CAAuC,KAAKP,KAAL,CAAWC,cAAlD,EAAkEO,IAAlE,GACLf,IADK,CACA,UAAUgB,MAAV,EAAiB;AACnBJ,MAAAA,MAAM,GAAGI,MAAT;AACH,KAHK,CAAP;AAID,SAAKC,QAAL,CAAc;AAACP,MAAAA,YAAY,EAACE;AAAd,KAAd;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACA,WAAOA,MAAP;AACH;;AAEU,QAAPM,OAAO,CAACC,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA8B;AACrC,UAAO,KAAKf,KAAL,CAAWE,QAAX,CACNI,OADM,CAENK,OAFM,CAEEC,IAFF,EAEQC,QAFR,EAEkBC,KAFlB,EAEyBC,KAFzB,EAGNC,IAHM,CAGD;AAACC,MAAAA,IAAI,EAAI,KAAKjB,KAAL,CAAWC;AAApB,KAHC,CAAP;AAKP;;AAGe,QAART,QAAQ,GAAE;AACZ,QAAI0B,MAAM,CAACC,QAAX,EAAqB;AACjBD,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIlC,IAAJ,CAASgC,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACH,KAHD,MAGO,IAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIlC,IAAJ,CAASgC,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACH,KAFM,MAEA;AACHJ,MAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACH;AACJ;;AACiB,QAAZC,YAAY,CAACZ,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA8B;AAC1C,UAAO,KAAKb,QAAL,CACNI,OADM,CAENK,OAFM,CAEEC,IAFF,EAEQC,QAFR,EAEkBC,KAFlB,EAEyBC,KAFzB,EAGNC,IAHM,CAGD;AAACC,MAAAA,IAAI,EAAI,KAAKjB,KAAL,CAAWC;AAApB,KAHC,EAGoCR,IAHpC,CAGyC,UAASgB,MAAT,EAAgB;AAC5Dd,MAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ;AACH,KALM,CAAP;AAML;;AAI0B,QAArBZ,qBAAqB,GAAE;AAC3B,UAAMuB,IAAI,GAAG,MAAM,IAAIlC,IAAJ,CAASA,IAAI,CAACuC,aAAL,IAAsB,uBAA/B,CAAnB;AACA,UAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACO,GAAL,CAASC,WAAT,EAAvB;AACA,SAAKlB,QAAL,CAAc;AAACT,MAAAA,cAAc,EAACyB,QAAQ,CAAC,CAAD;AAAxB,KAAd;AACA/B,IAAAA,OAAO,CAACC,GAAR,CAAY8B,QAAQ,CAAC,CAAD,CAApB;AACA/B,IAAAA,OAAO,CAACC,GAAR,CAAa,KAAKI,KAAL,CAAWC,cAAxB;AACA,UAAM4B,SAAS,GAAG,MAAMT,IAAI,CAACO,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,UAAMC,WAAW,GAAG7C,QAAQ,CAAC8C,QAAT,CAAkBJ,SAAlB,CAApB;;AACA,QAAGG,WAAH,EAAe;AACb,YAAME,KAAK,GAAG,MAAM,IAAId,IAAI,CAACO,GAAL,CAASQ,QAAb,CAAsBhD,QAAQ,CAACiD,GAA/B,EAAmCJ,WAAW,CAACK,OAA/C,CAApB;AACA,WAAK3B,QAAL,CAAc;AAACR,QAAAA,QAAQ,EAAEgC;AAAX,OAAd;AACA,YAAMI,CAAC,GAAG,MAAMJ,KAAK,CAAC5B,OAAN,CAAciC,WAAd,GAA4B/B,IAA5B,EAAhB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAL,CAAWE,QAAvB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY0C,CAAZ;AACA,UAAIE,CAAC,GAAG,MAAMN,KAAK,CAAC5B,OAAN,CAAcmC,KAAd,CAAoBH,CAAC,CAAC,CAAD,CAArB,EAA0B9B,IAA1B,EAAd;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY4C,CAAZ;AACA,UAAIE,GAAG,GAAG,MAAM,KAAKtC,YAAL,CAAkB,KAAKJ,KAAL,CAAWE,QAA7B,CAAhB;AACA,WAAKQ,QAAL,CAAc;AAACP,QAAAA,YAAY,EAAGuC;AAAhB,OAAd;AACD,KAVD,MAWI;AACFxB,MAAAA,MAAM,CAACK,KAAP,CAAa,oCAAb;AACD;AACF;;AAEDoB,EAAAA,oBAAoB,GAAE;AAEpB,QAAI,KAAK3C,KAAL,CAAWG,YAAX,KAA4B,KAAhC,EACI,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CADJ,KAGI,oBAAO,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAI,KAAKH,KAAL,CAAWC,cAAtC;AAAuD,MAAA,QAAQ,EAAK,KAAKD,KAAL,CAAWE;AAA/E;AAAA;AAAA;AAAA;AAAA,YAAP;AAEL;;AAED0C,EAAAA,MAAM,GAAG;AACL,wBAEI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBAGQ,KAAKD;AAHb;AAAA;AAAA;AAAA;AAAA,YAFJ;AASH;;AA/FmC;;AAkGtC,eAAetD,OAAf","sourcesContent":["import 'react-bootstrap'\nimport React from 'react';\nimport './App.css'\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\n\n\nclass  Welcome extends React.Component{\n    componentWillMount() {\n        this.loadWeb3().then(r => {console.log(\"Connected to metamask\")});\n        this.connectBlockChainData().then(r =>{console.log(\"data from blockchain now in our program\")});\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={currentAccount: 0x0, contract: null, existingUser :null};\n    }\n\n    async getUserState (contract){\n        let rvalue = false;\n         await  this.state.contract.methods.userExist( this.state.currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n        this.setState({existingUser:rvalue});\n        console.log(rvalue);\n        return rvalue;\n    }\n\n  async addUser(name, location, email, phone){\n        await  this.state.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  this.state.currentAccount});\n\n}\n\n\n  async loadWeb3(){\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  async RegisterUser(name, location, email, phone){\n        await  this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  this.state.currentAccount}).then(function(result){\n            console.log(result);\n        });\n  }\n\n\n\n  async connectBlockChainData(){\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({currentAccount:accounts[0]});\n    console.log(accounts[0]);\n    console.log( this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.setState({contract :Model});\n      const x = await Model.methods.getAllUsers().call();\n      console.log(this.state.contract);\n      console.log(x);\n      let z = await Model.methods.Users(x[0]).call();\n      console.log(z);\n      let iop = await this.getUserState(this.state.contract);\n      this.setState({existingUser : iop});\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  RegisterScreenLoader(){\n\n    if( this.state.existingUser === false)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={ this.state.currentAccount}  Contract = { this.state.contract} />\n\n  }\n\n  render() {\n      return (\n\n          <div className=\"App\">\n              {\n\n                  this.RegisterScreenLoader\n              }\n\n          </div>);\n  }\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}