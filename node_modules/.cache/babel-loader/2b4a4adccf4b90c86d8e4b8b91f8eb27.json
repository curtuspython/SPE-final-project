{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\";\nimport 'react-bootstrap';\nimport React from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Welcome extends React.Component {\n  componentWillMount() {\n    this.loadWeb3().then(r => {\n      console.log(\"Connected to metamask\");\n    });\n    this.connectBlockChainData().then(r => {\n      console.log(\"data from blockchain now in our program\");\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAccount: 0x0,\n      contract: null,\n      existingUser: null,\n      existingServiceProvider: null\n    };\n  }\n\n  async getUserState(contract) {\n    let rvalue = false;\n    await this.state.contract.methods.userExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingUser: rvalue\n    });\n    rvalue = false;\n    await this.state.contract.methods.serviceProviderExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingServiceProvider: rvalue\n    });\n    console.log(rvalue);\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async RegisterUser(name, location, email, phone) {\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.state.currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  }\n\n  async connectBlockChainData() {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      currentAccount: accounts[0]\n    });\n    console.log(this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.setState({\n        contract: Model\n      });\n      const x = await Model.methods.getAllUsers().call();\n      const y = await Model.methods.getAllServiceProviders().call();\n      console.log(x);\n      console.log(y);\n      console.log(await Model.methods.ServiceProviders(y[4]).call());\n      let iop = await this.getUserState(this.state.contract);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  }\n\n  RegisterScreenLoader(x, y) {\n    if (x === true || y === true) {\n      if (x === true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 20\n      }, this);else return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello service provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.state.currentAccount,\n      Contract: this.state.contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.RegisterScreenLoader(this.state.existingUser, this.state.existingServiceProvider)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Welcome;","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","Web3","ModelABI","RegisterScreen","Welcome","Component","componentWillMount","loadWeb3","then","r","console","log","connectBlockChainData","constructor","props","state","currentAccount","contract","existingUser","existingServiceProvider","getUserState","rvalue","methods","userExist","call","result","setState","serviceProviderExist","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","name","location","email","phone","addUser","send","from","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","x","getAllUsers","y","getAllServiceProviders","ServiceProviders","iop","RegisterScreenLoader","render"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React from 'react';\nimport './App.css'\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\n\n\nclass  Welcome extends React.Component{\n    componentWillMount() {\n        this.loadWeb3().then(r => {console.log(\"Connected to metamask\")});\n        this.connectBlockChainData().then(r =>{console.log(\"data from blockchain now in our program\")});\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={currentAccount: 0x0, contract: null, existingUser :null, existingServiceProvider:null};\n    }\n\n    async getUserState (contract){\n        let rvalue = false;\n         await  this.state.contract.methods.userExist( this.state.currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n        this.setState({existingUser:rvalue});\n\n        rvalue = false\n        await  this.state.contract.methods.serviceProviderExist( this.state.currentAccount).call()\n            .then(function (result){\n                rvalue = result;\n            });\n        this.setState({existingServiceProvider:rvalue});\n\n        console.log(rvalue);\n    }\n\n\n  async loadWeb3(){\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  async RegisterUser(name, location, email, phone){\n        await  this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  this.state.currentAccount}).then(function(result){\n            console.log(result);\n        });\n  }\n\n\n\n  async connectBlockChainData(){\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({currentAccount:accounts[0]});\n    console.log( this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.setState({contract :Model});\n      const x = await Model.methods.getAllUsers().call();\n      const y = await Model.methods.getAllServiceProviders().call();\n      console.log(x);\n      console.log(y);\n      console.log(await Model.methods.ServiceProviders(y[4]).call());\n      let iop = await this.getUserState(this.state.contract);\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  RegisterScreenLoader(x, y){\n\n    if( x === true || y === true)\n        if(x === true)\n            return <h1>Hello User</h1>\n        else\n            return <h1>Hello service provider</h1>\n    else\n        return <RegisterScreen Account ={ this.state.currentAccount}  Contract = { this.state.contract} />\n\n  }\n\n  render() {\n      return (\n\n          <div className=\"App\">\n\n              {\n\n                  this.RegisterScreenLoader(this.state.existingUser,this.state.existingServiceProvider)\n              }\n\n          </div>);\n  }\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}