{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\";\nimport 'react-bootstrap';\nimport React from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport DisplayServiceProviders from \"./components/DisplayServiceProviders\";\nimport Payment from \"./components/Payment\";\nimport Servp from \"./components/providerscreen\";\nimport Wait from \"./components/wait\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Welcome extends React.Component {\n  componentWillMount() {\n    this.loadWeb3().then(r => {\n      console.log(\"Connected to metamask\");\n    });\n    this.connectBlockChainData().then(r => {\n      this.user();\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAccount: 0x0,\n      contract: null,\n      existingUser: null,\n      existingServiceProvider: null,\n      serviceProvidersList: null,\n      msg: false,\n      ong: false\n    };\n  }\n\n  async getUserState(contract) {\n    let rvalue = false;\n    await this.state.contract.methods.userExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingUser: rvalue\n    });\n    rvalue = false;\n    await this.state.contract.methods.serviceProviderExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingServiceProvider: rvalue\n    });\n    console.log(rvalue);\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async RegisterUser(name, location, email, phone) {\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.state.currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  }\n\n  async connectBlockChainData() {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      currentAccount: accounts[0]\n    });\n    console.log(this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.setState({\n        contract: Model\n      });\n      const x = await Model.methods.getAllUsers().call();\n      const y = await Model.methods.getAllServiceProviders().call();\n      console.log(x);\n      console.log(y);\n      console.log(await Model.methods.ServiceProviders(y[4]).call());\n      let iop = await this.getUserState(this.state.contract);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  }\n\n  async user() {\n    let v = false;\n    let alert = false;\n    let s = false;\n    await this.state.contract.methods.Users(this.state.currentAccount).call().then(function (result) {\n      v = result.serv;\n      alert = result.messagealert;\n      s = result.ongiong_service;\n      console.log(s);\n    });\n    this.setState({\n      sp: v\n    });\n    this.setState({\n      msg: alert\n    });\n    this.setState({\n      ong: s\n    });\n  }\n\n  RegisterScreenLoader(x, y) {\n    if (x === true || y === true) {\n      if (x === true) {\n        if (this.state.sp === true) {\n          if (this.state.msg === true) {\n            /*#__PURE__*/\n            _jsxDEV(\"h1\", {\n              children: \" your requect was dinied\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 25\n            }, this);\n\n            window.alert(\"Service Provider Denied to service\");\n            return /*#__PURE__*/_jsxDEV(DisplayServiceProviders, {\n              Account: this.state.currentAccount,\n              Contract: this.state.contract\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 32\n            }, this);\n          } else {\n            if (this.state.ong == true) {\n              return /*#__PURE__*/_jsxDEV(Payment, {\n                contract: this.state.contract,\n                account: this.state.currentAccount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 32\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(Wait, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 32\n              }, this);\n            }\n          }\n        } else {\n          return /*#__PURE__*/_jsxDEV(DisplayServiceProviders, {\n            Account: this.state.currentAccount,\n            Contract: this.state.contract\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 28\n          }, this);\n        }\n      } else return /*#__PURE__*/_jsxDEV(Servp, {\n        Account: this.state.currentAccount,\n        Contract: this.state.contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.state.currentAccount,\n      Contract: this.state.contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 20\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.RegisterScreenLoader(this.state.existingUser, this.state.existingServiceProvider)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Welcome;","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","Web3","ModelABI","RegisterScreen","DisplayServiceProviders","Payment","Servp","Wait","Welcome","Component","componentWillMount","loadWeb3","then","r","console","log","connectBlockChainData","user","constructor","props","state","currentAccount","contract","existingUser","existingServiceProvider","serviceProvidersList","msg","ong","getUserState","rvalue","methods","userExist","call","result","setState","serviceProviderExist","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","name","location","email","phone","addUser","send","from","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","x","getAllUsers","y","getAllServiceProviders","ServiceProviders","iop","v","s","Users","serv","messagealert","ongiong_service","sp","RegisterScreenLoader","render"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React from 'react';\nimport './App.css'\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport DisplayServiceProviders from \"./components/DisplayServiceProviders\";\nimport Payment from \"./components/Payment\";\nimport Servp from \"./components/providerscreen\";\nimport Wait  from \"./components/wait\";\n\nclass  Welcome extends React.Component{\n    componentWillMount() {\n        \n        this.loadWeb3().then(r => {console.log(\"Connected to metamask\")});\n        this.connectBlockChainData().then(r =>{this.user()});\n\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={currentAccount: 0x0,\n            contract: null,\n            existingUser :null,\n            existingServiceProvider:null,\n            serviceProvidersList :null,\n            msg : false,\n            ong:false\n\n        };\n    }\n\n    async getUserState (contract){\n        let rvalue = false;\n        await  this.state.contract.methods.userExist( this.state.currentAccount).call()\n            .then(function (result){\n                rvalue = result;\n            });\n        this.setState({existingUser:rvalue});\n\n        rvalue = false\n        await  this.state.contract.methods.serviceProviderExist( this.state.currentAccount).call()\n            .then(function (result){\n                rvalue = result;\n            });\n        this.setState({existingServiceProvider:rvalue});\n\n        console.log(rvalue);\n    }\n\n\n    async loadWeb3(){\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n    }\n    async RegisterUser(name, location, email, phone){\n        await  this.contract\n            .methods\n            .addUser(name, location, email, phone)\n            .send({from :  this.state.currentAccount}).then(function(result){\n                console.log(result);\n            });\n    }\n\n\n\n    async connectBlockChainData(){\n        const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n        const accounts = await web3.eth.getAccounts()\n        this.setState({currentAccount:accounts[0]});\n        console.log( this.state.currentAccount);\n        const networkId = await web3.eth.net.getId();\n        const networkData = ModelABI.networks[networkId];\n        if(networkData){\n            const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n            this.setState({contract :Model});\n            const x = await Model.methods.getAllUsers().call();\n            const y = await Model.methods.getAllServiceProviders().call();\n            console.log(x);\n            console.log(y);\n            console.log(await Model.methods.ServiceProviders(y[4]).call());\n            let iop = await this.getUserState(this.state.contract);\n        }\n        else{\n            window.alert(\"Please switch to Ganache Network!!\")\n        }\n    }\n\n    async user()\n    {\n        let v= false;\n        let alert = false;\n        let s=false;\n        await this.state.contract.methods.Users(this.state.currentAccount).call()\n            .then(function(result){\n                v= result.serv;\n                alert = result.messagealert;\n                s=result.ongiong_service;\n                console.log(s);\n\n            });\n        this.setState({sp :v});\n        this.setState({msg:alert});\n        this.setState({ong:s})\n    }\n\n    RegisterScreenLoader(x, y){\n\n        if( x === true || y === true)\n            if(x === true){\n                if(this.state.sp=== true){\n                    if(this.state.msg === true){\n                        <h1> your requect was dinied</h1>\n                        window.alert(\"Service Provider Denied to service\");\n                        return <DisplayServiceProviders Account = {this.state.currentAccount}  Contract={this.state.contract}/>\n                    }\n                    else {if(this.state.ong==true){\n                        return <Payment contract= {this.state.contract} account ={this.state.currentAccount}/>}\n                    else{\n                        return <Wait/>}}}\n                else {\n                    return <DisplayServiceProviders Account = {this.state.currentAccount}  Contract={this.state.contract}/>}}\n            else return <Servp Account={this.state.currentAccount}  Contract={this.state.contract}/>\n        else\n            return <RegisterScreen Account ={ this.state.currentAccount}  Contract = { this.state.contract} />\n\n    }\n\n    render() {\n        return (\n\n            <div className=\"App\">\n\n                {\n\n                    this.RegisterScreenLoader(this.state.existingUser,this.state.existingServiceProvider)\n                }\n\n            </div>);\n    }\n}\n\nexport default Welcome;"]},"metadata":{},"sourceType":"module"}