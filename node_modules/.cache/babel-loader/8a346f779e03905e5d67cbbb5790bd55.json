{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\";\nimport 'react-bootstrap';\nimport React from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport DisplayServiceProviders from \"./components/DisplayServiceProviders\";\nimport Payment from \"./components/Payment\";\nimport Servp from \"./components/providerscreen\";\nimport Wait from \"./components/wait\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Welcome extends React.Component {\n  componentWillMount() {\n    this.loadWeb3().then(r => {\n      console.log(\"Connected to metamask\");\n    });\n    this.connectBlockChainData().then(r => {\n      this.user();\n    });\n    this.general(this.state.loader);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAccount: 0x0,\n      contract: null,\n      existingUser: null,\n      existingServiceProvider: null,\n      serviceProvidersList: null,\n      msg: false,\n      ong: false,\n      loader: true\n    };\n  }\n\n  async getUserState(contract) {\n    this.setState({\n      loader: true\n    });\n    let rvalue = false;\n    await this.state.contract.methods.userExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingUser: rvalue\n    });\n    rvalue = false;\n    await this.state.contract.methods.serviceProviderExist(this.state.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    this.setState({\n      existingServiceProvider: rvalue\n    });\n    console.log(rvalue);\n    this.setState({\n      loader: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async RegisterUser(name, location, email, phone) {\n    this.setState({\n      loader: true\n    });\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.state.currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n    this.setState({\n      loader: false\n    });\n  }\n\n  general(loader) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Please hold on, loading!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 18\n    }, this);\n  }\n\n  async connectBlockChainData() {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      currentAccount: accounts[0]\n    });\n    console.log(this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.setState({\n        contract: Model\n      });\n      const x = await Model.methods.getAllUsers().call();\n      const y = await Model.methods.getAllServiceProviders().call();\n      console.log(x);\n      console.log(y);\n      console.log(await Model.methods.ServiceProviders(y[4]).call());\n      let iop = await this.getUserState(this.state.contract);\n      this.setState({\n        loader: false\n      });\n    } else {\n      window.alert(\"Please switch to Ropsten Network!!\");\n    }\n  }\n\n  async user() {\n    this.setState({\n      loader: true\n    });\n    let v = false;\n    let alert = false;\n    let s = false;\n    await this.state.contract.methods.Users(this.state.currentAccount).call().then(function (result) {\n      v = result.serv;\n      alert = result.messagealert;\n      console.log(alert);\n      s = result.ongiong_service;\n    });\n    this.setState({\n      sp: v\n    });\n    this.setState({\n      msg: alert\n    });\n    this.setState({\n      ong: s\n    });\n    this.setState({\n      loader: false\n    });\n  }\n\n  RegisterScreenLoader(x, y) {\n    if (x === true || y === true) {\n      if (x === true) {\n        if (this.state.sp === true) {\n          if (this.state.msg === true) {\n            return /*#__PURE__*/_jsxDEV(DisplayServiceProviders, {\n              Account: this.state.currentAccount,\n              Contract: this.state.contract,\n              flag: this.state.msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 28\n            }, this);\n          } else {\n            if (this.state.ong == true) return /*#__PURE__*/_jsxDEV(Payment, {\n              contract: this.state.contract,\n              account: this.state.currentAccount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 32\n            }, this);else return /*#__PURE__*/_jsxDEV(Wait, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 32\n            }, this);\n          }\n        } else {\n          return /*#__PURE__*/_jsxDEV(DisplayServiceProviders, {\n            Account: this.state.currentAccount,\n            Contract: this.state.contract,\n            flag: this.state.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 24\n          }, this);\n        }\n      } else return /*#__PURE__*/_jsxDEV(Servp, {\n        Account: this.state.currentAccount,\n        Contract: this.state.contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.state.currentAccount,\n      Contract: this.state.contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.RegisterScreenLoader(this.state.existingUser, this.state.existingServiceProvider)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Welcome;","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","Web3","ModelABI","RegisterScreen","DisplayServiceProviders","Payment","Servp","Wait","Welcome","Component","componentWillMount","loadWeb3","then","r","console","log","connectBlockChainData","user","general","state","loader","constructor","props","currentAccount","contract","existingUser","existingServiceProvider","serviceProvidersList","msg","ong","getUserState","setState","rvalue","methods","userExist","call","result","serviceProviderExist","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","name","location","email","phone","addUser","send","from","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","x","getAllUsers","y","getAllServiceProviders","ServiceProviders","iop","v","s","Users","serv","messagealert","ongiong_service","sp","RegisterScreenLoader","render"],"mappings":";AAAA,OAAO,iBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,uBAAP,MAAoC,sCAApC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;;AAEA,MAAOC,OAAP,SAAuBR,KAAK,CAACS,SAA7B,CAAsC;AAClCC,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,QAAL,GAAgBC,IAAhB,CAAqBC,CAAC,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAAqC,KAAhE;AACA,SAAKC,qBAAL,GAA6BJ,IAA7B,CAAkCC,CAAC,IAAG;AAAC,WAAKI,IAAL;AAAa,KAApD;AACA,SAAKC,OAAL,CAAa,KAAKC,KAAL,CAAWC,MAAxB;AAEH;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKH,KAAL,GAAW;AAACI,MAAAA,cAAc,EAAE,GAAjB;AACPC,MAAAA,QAAQ,EAAE,IADH;AAEPC,MAAAA,YAAY,EAAE,IAFP;AAGPC,MAAAA,uBAAuB,EAAC,IAHjB;AAIPC,MAAAA,oBAAoB,EAAE,IAJf;AAKPC,MAAAA,GAAG,EAAG,KALC;AAMPC,MAAAA,GAAG,EAAE,KANE;AAOPT,MAAAA,MAAM,EAAE;AAPD,KAAX;AAUH;;AAEiB,QAAZU,YAAY,CAAEN,QAAF,EAAW;AACzB,SAAKO,QAAL,CAAc;AAACX,MAAAA,MAAM,EAAE;AAAT,KAAd;AACA,QAAIY,MAAM,GAAG,KAAb;AACC,UAAO,KAAKb,KAAL,CAAWK,QAAX,CAAoBS,OAApB,CAA4BC,SAA5B,CAAuC,KAAKf,KAAL,CAAWI,cAAlD,EAAkEY,IAAlE,GACLvB,IADK,CACA,UAAUwB,MAAV,EAAiB;AACnBJ,MAAAA,MAAM,GAAGI,MAAT;AACH,KAHK,CAAP;AAID,SAAKL,QAAL,CAAc;AAACN,MAAAA,YAAY,EAACO;AAAd,KAAd;AAEAA,IAAAA,MAAM,GAAG,KAAT;AACA,UAAO,KAAKb,KAAL,CAAWK,QAAX,CAAoBS,OAApB,CAA4BI,oBAA5B,CAAkD,KAAKlB,KAAL,CAAWI,cAA7D,EAA6EY,IAA7E,GACFvB,IADE,CACG,UAAUwB,MAAV,EAAiB;AACnBJ,MAAAA,MAAM,GAAGI,MAAT;AACH,KAHE,CAAP;AAIA,SAAKL,QAAL,CAAc;AAACL,MAAAA,uBAAuB,EAACM;AAAzB,KAAd;AAEAlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,MAAZ;AACA,SAAKD,QAAL,CAAc;AAACX,MAAAA,MAAM,EAAE;AAAT,KAAd;AACH;;AAGW,QAART,QAAQ,GAAE;AACZ,QAAI2B,MAAM,CAACC,QAAX,EAAqB;AACjBD,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIvC,IAAJ,CAASqC,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACH,KAHD,MAGO,IAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIvC,IAAJ,CAASqC,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACH,KAFM,MAEA;AACHJ,MAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACH;AACJ;;AACiB,QAAZC,YAAY,CAACC,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA8B;AAC5C,SAAKjB,QAAL,CAAc;AAACX,MAAAA,MAAM,EAAE;AAAT,KAAd;AACE,UAAO,KAAKI,QAAL,CACNS,OADM,CAENgB,OAFM,CAEEJ,IAFF,EAEQC,QAFR,EAEkBC,KAFlB,EAEyBC,KAFzB,EAGNE,IAHM,CAGD;AAACC,MAAAA,IAAI,EAAI,KAAKhC,KAAL,CAAWI;AAApB,KAHC,EAGoCX,IAHpC,CAGyC,UAASwB,MAAT,EAAgB;AAC5DtB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAZ;AACH,KALM,CAAP;AAMF,SAAKL,QAAL,CAAc;AAACX,MAAAA,MAAM,EAAE;AAAT,KAAd;AACH;;AAEDF,EAAAA,OAAO,CAACE,MAAD,EAAQ;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAEP;;AAG0B,QAArBJ,qBAAqB,GAAE;AAC3B,UAAMwB,IAAI,GAAG,MAAM,IAAIvC,IAAJ,CAASA,IAAI,CAACmD,aAAL,IAAsB,uBAA/B,CAAnB;AACA,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACc,GAAL,CAASC,WAAT,EAAvB;AACA,SAAKxB,QAAL,CAAc;AAACR,MAAAA,cAAc,EAAC8B,QAAQ,CAAC,CAAD;AAAxB,KAAd;AACAvC,IAAAA,OAAO,CAACC,GAAR,CAAa,KAAKI,KAAL,CAAWI,cAAxB;AACA,UAAMiC,SAAS,GAAG,MAAMhB,IAAI,CAACc,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,UAAMC,WAAW,GAAGzD,QAAQ,CAAC0D,QAAT,CAAkBJ,SAAlB,CAApB;;AACA,QAAGG,WAAH,EAAe;AACb,YAAME,KAAK,GAAG,MAAM,IAAIrB,IAAI,CAACc,GAAL,CAASQ,QAAb,CAAsB5D,QAAQ,CAAC6D,GAA/B,EAAmCJ,WAAW,CAACK,OAA/C,CAApB;AACA,WAAKjC,QAAL,CAAc;AAACP,QAAAA,QAAQ,EAAEqC;AAAX,OAAd;AACA,YAAMI,CAAC,GAAG,MAAMJ,KAAK,CAAC5B,OAAN,CAAciC,WAAd,GAA4B/B,IAA5B,EAAhB;AACA,YAAMgC,CAAC,GAAG,MAAMN,KAAK,CAAC5B,OAAN,CAAcmC,sBAAd,GAAuCjC,IAAvC,EAAhB;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAYkD,CAAZ;AACAnD,MAAAA,OAAO,CAACC,GAAR,CAAYoD,CAAZ;AACArD,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAM8C,KAAK,CAAC5B,OAAN,CAAcoC,gBAAd,CAA+BF,CAAC,CAAC,CAAD,CAAhC,EAAqChC,IAArC,EAAlB;AACA,UAAImC,GAAG,GAAG,MAAM,KAAKxC,YAAL,CAAkB,KAAKX,KAAL,CAAWK,QAA7B,CAAhB;AACA,WAAKO,QAAL,CAAc;AAACX,QAAAA,MAAM,EAAG;AAAV,OAAd;AACD,KAVD,MAWI;AACFkB,MAAAA,MAAM,CAACK,KAAP,CAAa,oCAAb;AACD;AACF;;AAEW,QAAJ1B,IAAI,GACV;AAAI,SAAKc,QAAL,CAAc;AAACX,MAAAA,MAAM,EAAE;AAAT,KAAd;AACA,QAAImD,CAAC,GAAE,KAAP;AACA,QAAI5B,KAAK,GAAG,KAAZ;AACA,QAAI6B,CAAC,GAAC,KAAN;AACA,UAAM,KAAKrD,KAAL,CAAWK,QAAX,CAAoBS,OAApB,CAA4BwC,KAA5B,CAAkC,KAAKtD,KAAL,CAAWI,cAA7C,EAA6DY,IAA7D,GACDvB,IADC,CACI,UAASwB,MAAT,EAAgB;AAClBmC,MAAAA,CAAC,GAAEnC,MAAM,CAACsC,IAAV;AACA/B,MAAAA,KAAK,GAAGP,MAAM,CAACuC,YAAf;AACA7D,MAAAA,OAAO,CAACC,GAAR,CAAY4B,KAAZ;AACA6B,MAAAA,CAAC,GAACpC,MAAM,CAACwC,eAAT;AAEH,KAPC,CAAN;AAQA,SAAK7C,QAAL,CAAc;AAAC8C,MAAAA,EAAE,EAAEN;AAAL,KAAd;AACA,SAAKxC,QAAL,CAAc;AAACH,MAAAA,GAAG,EAACe;AAAL,KAAd;AACA,SAAKZ,QAAL,CAAc;AAACF,MAAAA,GAAG,EAAC2C;AAAL,KAAd;AACA,SAAKzC,QAAL,CAAc;AAACX,MAAAA,MAAM,EAAG;AAAV,KAAd;AACH;;AAEH0D,EAAAA,oBAAoB,CAACb,CAAD,EAAIE,CAAJ,EAAM;AAExB,QAAIF,CAAC,KAAK,IAAN,IAAcE,CAAC,KAAK,IAAxB;AACI,UAAGF,CAAC,KAAK,IAAT,EAAc;AACV,YAAG,KAAK9C,KAAL,CAAW0D,EAAX,KAAiB,IAApB,EAAyB;AACrB,cAAG,KAAK1D,KAAL,CAAWS,GAAX,KAAmB,IAAtB,EAA2B;AACvB,gCAAO,QAAC,uBAAD;AAAyB,cAAA,OAAO,EAAI,KAAKT,KAAL,CAAWI,cAA/C;AAAgE,cAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,QAArF;AAA+F,cAAA,IAAI,EAAI,KAAKL,KAAL,CAAWS;AAAlH;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFD,MAGK;AACD,gBAAG,KAAKT,KAAL,CAAWU,GAAX,IAAgB,IAAnB,EACI,oBAAO,QAAC,OAAD;AAAS,cAAA,QAAQ,EAAG,KAAKV,KAAL,CAAWK,QAA/B;AAAyC,cAAA,OAAO,EAAG,KAAKL,KAAL,CAAWI;AAA9D;AAAA;AAAA;AAAA;AAAA,oBAAP,CADJ,KAGI,oBAAO,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,oBAAP;AACP;AACJ,SAVD,MAWK;AACD,8BAAO,QAAC,uBAAD;AAAyB,YAAA,OAAO,EAAI,KAAKJ,KAAL,CAAWI,cAA/C;AAAgE,YAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,QAArF;AAA+F,YAAA,IAAI,EAAI,KAAKL,KAAL,CAAWS;AAAlH;AAAA;AAAA;AAAA;AAAA,kBAAP;AAAgI;AAAE,OAb1I,MAcK,oBAAO,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,KAAKT,KAAL,CAAWI,cAA3B;AAA4C,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK;AAAjE;AAAA;AAAA;AAAA;AAAA,cAAP;AAfT,WAiBI,oBAAO,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAI,KAAKL,KAAL,CAAWI,cAAtC;AAAuD,MAAA,QAAQ,EAAK,KAAKJ,KAAL,CAAWK;AAA/E;AAAA;AAAA;AAAA;AAAA,YAAP;AACL;;AAEDuD,EAAAA,MAAM,GAAG;AACL,wBAEI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBAIQ,KAAKD,oBAAL,CAA0B,KAAK3D,KAAL,CAAWM,YAArC,EAAkD,KAAKN,KAAL,CAAWO,uBAA7D;AAJR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAUH;;AAjJmC;;AAqJtC,eAAelB,OAAf","sourcesContent":["import 'react-bootstrap'\nimport React from 'react';\nimport './App.css'\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport DisplayServiceProviders from \"./components/DisplayServiceProviders\";\nimport Payment from \"./components/Payment\";\nimport Servp from \"./components/providerscreen\";\nimport Wait from \"./components/wait\"\n\nclass  Welcome extends React.Component{\n    componentWillMount() {\n        this.loadWeb3().then(r => {console.log(\"Connected to metamask\")});\n        this.connectBlockChainData().then(r =>{this.user();});\n        this.general(this.state.loader);\n\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={currentAccount: 0x0,\n            contract: null,\n            existingUser :null,\n            existingServiceProvider:null,\n            serviceProvidersList :null,\n            msg : false,\n            ong :false,\n            loader: true\n\n        };\n    }\n\n    async getUserState (contract){\n        this.setState({loader :true});\n        let rvalue = false;\n         await  this.state.contract.methods.userExist( this.state.currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n        this.setState({existingUser:rvalue});\n\n        rvalue = false\n        await  this.state.contract.methods.serviceProviderExist( this.state.currentAccount).call()\n            .then(function (result){\n                rvalue = result;\n            });\n        this.setState({existingServiceProvider:rvalue});\n\n        console.log(rvalue);\n        this.setState({loader :false});\n    }\n\n\n  async loadWeb3(){\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  async RegisterUser(name, location, email, phone){\n      this.setState({loader :true});\n        await  this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  this.state.currentAccount}).then(function(result){\n            console.log(result);\n        });\n      this.setState({loader :false});\n  }\n\n  general(loader){\n          return <div>Please hold on, loading!!!</div>\n\n  }\n\n\n  async connectBlockChainData(){\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({currentAccount:accounts[0]});\n    console.log( this.state.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.setState({contract :Model});\n      const x = await Model.methods.getAllUsers().call();\n      const y = await Model.methods.getAllServiceProviders().call();\n      console.log(x);\n      console.log(y);\n      console.log(await Model.methods.ServiceProviders(y[4]).call());\n      let iop = await this.getUserState(this.state.contract);\n      this.setState({loader : false});\n    }\n    else{\n      window.alert(\"Please switch to Ropsten Network!!\")\n    }\n  }\n\n    async user()\n    {   this.setState({loader :true});\n        let v= false;\n        let alert = false;\n        let s=false;\n        await this.state.contract.methods.Users(this.state.currentAccount).call()\n            .then(function(result){\n                v= result.serv;\n                alert = result.messagealert;\n                console.log(alert);\n                s=result.ongiong_service;\n\n            });\n        this.setState({sp :v});\n        this.setState({msg:alert});\n        this.setState({ong:s});\n        this.setState({loader : false});\n    }\n\n  RegisterScreenLoader(x, y){\n\n    if( x === true || y === true)\n        if(x === true){\n            if(this.state.sp=== true){\n                if(this.state.msg === true){\n                    return <DisplayServiceProviders Account = {this.state.currentAccount}  Contract={this.state.contract} flag = {this.state.msg}/>\n                }\n                else {\n                    if(this.state.ong==true)\n                        return <Payment contract= {this.state.contract} account ={this.state.currentAccount}/>\n                    else\n                        return <Wait/>\n                }\n            }\n            else {\n                return <DisplayServiceProviders Account = {this.state.currentAccount}  Contract={this.state.contract} flag = {this.state.msg}/>} }\n        else return <Servp Account={this.state.currentAccount}  Contract={this.state.contract}/>\n    else\n        return <RegisterScreen Account ={ this.state.currentAccount}  Contract = { this.state.contract} />\n  }\n\n  render() {\n      return (\n\n          <div className=\"App\">\n\n              {\n\n                  this.RegisterScreenLoader(this.state.existingUser,this.state.existingServiceProvider)\n              }\n\n          </div>);\n  }\n\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}