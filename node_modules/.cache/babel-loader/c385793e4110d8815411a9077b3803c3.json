{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { bool } from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let currentAccount = 0;\n  const [contract, setContract] = useState(); //const [existingUser, setExistingUser] = useState();\n\n  constructor();\n  {\n    this.state = {\n      account: '',\n      tCount: 0,\n      existingUser: false,\n      tasks: [],\n      loading: true\n    };\n  }\n  useEffect(() => {\n    loadWeb3();\n    connectBlockChainData();\n  }, []);\n  const memoizedValue = React.useMemo < bool > (async () => {\n    await contract.methods.userExist(currentAccount).call();\n  }, [contract]);\n\n  const addUser = async (name, location, email, phone) => {\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    });\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  };\n\n  const RegisterUser = async (name, location, email, phone) => {\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    });\n  };\n\n  const connectBlockChainData = async () => {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = new web3.eth.Contract(ModelABI.abi, networkData.address);\n      setContract(Model);\n      console.log(memoizedValue); //setExistingUser(memoizedValue);\n      //console.log(existingUser);\n\n      this.state.existingUser = memoizedValue;\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  };\n\n  const renderAuthButton = () => {\n    if (this.state.existingUser == true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: currentAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: renderAuthButton()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"nc1A/Mqqc5v+YCO49nqT5AoiVtg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useEffect","useState","Web3","ModelABI","RegisterScreen","bool","App","currentAccount","contract","setContract","constructor","state","account","tCount","existingUser","tasks","loading","loadWeb3","connectBlockChainData","memoizedValue","useMemo","methods","userExist","call","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","console","log","networkId","net","getId","networkData","networks","Model","Contract","abi","address","renderAuthButton"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport {bool} from \"prop-types\";\n\nfunction App() {\n  let currentAccount = 0;\n  const [contract, setContract] = useState();\n  //const [existingUser, setExistingUser] = useState();\n\n  constructor()\n    {\n        this.state = {account : '', tCount : 0,existingUser : false, tasks:[], loading:true}\n    }\n\n    useEffect(()=> {\n    loadWeb3();\n    connectBlockChainData();\n  },[]);\n\n  const memoizedValue = React.useMemo<bool>(async () => {\n      await contract.methods.userExist(currentAccount).call();\n\n  }, [contract]);\n\n  const addUser = async (name, location, email, phone) => {\n    await contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : currentAccount});\n\n  };\n\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  const RegisterUser = async (name, location, email, phone) =>{\n    await contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : currentAccount});\n  }\n\n\n\n  const connectBlockChainData = async() =>{\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = new web3.eth.Contract(ModelABI.abi,networkData.address);\n      setContract(Model);\n      console.log(memoizedValue)\n      //setExistingUser(memoizedValue);\n      //console.log(existingUser);\n        this.state.existingUser = memoizedValue\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  const renderAuthButton = () => {\n    if(this.state.existingUser == true)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={currentAccount} />\n\n  }\n  return (\n\n        <div className=\"App\">\n            {\n            renderAuthButton()\n          }\n        </div>);\n\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}