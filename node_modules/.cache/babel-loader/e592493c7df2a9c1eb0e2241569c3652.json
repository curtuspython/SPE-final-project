{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\";\nimport 'react-bootstrap';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Welcome extends React.Component {\n  componentWillMount() {\n    this.loadWeb3().then(r => {\n      console.log(\"verified the browser support for ehtereum\");\n    });\n    this.connectBlockChainData().then(r => {\n      console.log(\"Data fecthed from blockchain\");\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.currentAccount = null;\n    this.contract = null;\n    this.existingUser = null;\n  }\n\n  async getUserState() {\n    let rvalue = true;\n    await this.contract.methods.userExist(this.currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    return rvalue;\n  }\n\n  async addUser(name, location, email, phone) {\n    console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\");\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.currentAccount\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async RegisterUser(name, location, email, phone) {\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  }\n\n  async connectBlockChainData() {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(this.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.contract = Model; //const x = await Model.methods.getAllUsers().call()\n\n      console.log(this.contract); //console.log(x);\n\n      this.existingUser = await this.getUserState();\n      console.log(this.existingUser);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  }\n\n  renderAuthButton() {\n    if (this.existingUser === true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.currentAccount,\n      Register: this.RegisterUser,\n      contract: this.contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Welcome;","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useState","Web3","ModelABI","RegisterScreen","Welcome","Component","componentWillMount","loadWeb3","then","r","console","log","connectBlockChainData","constructor","props","currentAccount","contract","existingUser","getUserState","rvalue","methods","userExist","call","result","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","renderAuthButton","render"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React, {useState} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\n\nclass Welcome extends React.Component {\n    componentWillMount() {\n        this.loadWeb3().then(r=>{console.log(\"verified the browser support for ehtereum\")})\n        this.connectBlockChainData().then(r => {console.log(\"Data fecthed from blockchain\")})\n    }\n\n  constructor(props) {\n      super(props);\n      this.currentAccount = null;\n      this.contract = null;\n      this.existingUser = null;\n  }\n\n  async getUserState(){\n        let rvalue = true;\n        await this.contract.methods.userExist(this.currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n      return rvalue;\n    }\n\n  async addUser(name, location, email, phone){\n\n        console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\")\n    await this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : this.currentAccount});\n\n}\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async RegisterUser(name, location, email, phone){\n    await this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : this.currentAccount}).then(function(result){\n            console.log(result);\n        });\n  }\n\n\n\n  async connectBlockChainData(){\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(this.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.contract = Model;\n      //const x = await Model.methods.getAllUsers().call()\n      console.log(this.contract);\n      //console.log(x);\n      this.existingUser =await this.getUserState();\n      console.log(this.existingUser);\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  renderAuthButton(){\n    if(this.existingUser === true)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={this.currentAccount} Register={this.RegisterUser} contract = {this.contract} />\n\n  }\n  render()\n{\n    return (\n\n        <div className=\"App\">\n            {\n                this.renderAuthButton()\n            }\n        </div>);\n}\n\n\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}