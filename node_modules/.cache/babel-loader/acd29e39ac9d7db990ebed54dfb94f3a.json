{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [contract, setContract] = useState(\"\");\n  useEffect(() => {\n    loadWeb3();\n    connectBlockChainData();\n  }, []);\n\n  const addUser = async (name, location, email, phone) => {\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    });\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      console.log(\"successfully into first case\");\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n      console.log(\"successfully into second case\");\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  };\n\n  const connectBlockChainData = async () => {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    setCurrentAccount(accounts[0]);\n    console.log(currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = new web3.eth.Contract(ModelABI.abi, networkData.address);\n      setContract(Model);\n      await addUser();\n      console.log(await contract.methods.Users(currentAccount).call());\n    } else {\n      window.alert(\"Please switch to Rinkeby Network!!\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Learn React\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dsXp7o3kABGDodm0o1y0OJBKYH8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useEffect","useState","Web3","ModelABI","App","currentAccount","setCurrentAccount","contract","setContract","loadWeb3","connectBlockChainData","addUser","name","location","email","phone","methods","send","from","window","ethereum","web3","enable","console","log","currentProvider","alert","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","Users","call"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,EAApD;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACbS,IAAAA,QAAQ;AACRC,IAAAA,qBAAqB;AACtB,GAHQ,EAGP,EAHO,CAAT;;AAKA,QAAMC,OAAO,GAAG,OAAOC,IAAP,EAAaC,QAAb,EAAuBC,KAAvB,EAA8BC,KAA9B,KAAwC;AACtD,UAAMR,QAAQ,CACTS,OADC,CAEDL,OAFC,CAEOC,IAFP,EAEaC,QAFb,EAEuBC,KAFvB,EAE8BC,KAF9B,EAGDE,IAHC,CAGI;AAACC,MAAAA,IAAI,EAAGb;AAAR,KAHJ,CAAN;AAKD,GAND;;AAQA,QAAMI,QAAQ,GAAG,YAAY;AAC3B,QAAIU,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAInB,IAAJ,CAASiB,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,KAJD,MAKK,IAAIL,MAAM,CAACE,IAAX,EAAiB;AACpBF,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAInB,IAAJ,CAASiB,MAAM,CAACE,IAAP,CAAYI,eAArB,CAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAHI,MAIA;AACHL,MAAAA,MAAM,CAACO,KAAP,CAAa,qEAAb;AACD;AACF,GAbD;;AAeA,QAAMhB,qBAAqB,GAAG,YAAU;AACtC,UAAMW,IAAI,GAAG,MAAM,IAAInB,IAAJ,CAASA,IAAI,CAACyB,aAAL,IAAsB,uBAA/B,CAAnB;AACA,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,WAAT,EAAvB;AACAxB,IAAAA,iBAAiB,CAACsB,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYnB,cAAZ;AACA,UAAM0B,SAAS,GAAG,MAAMV,IAAI,CAACQ,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,UAAMC,WAAW,GAAG/B,QAAQ,CAACgC,QAAT,CAAkBJ,SAAlB,CAApB;;AACA,QAAGG,WAAH,EAAe;AACb,YAAME,KAAK,GAAG,IAAIf,IAAI,CAACQ,GAAL,CAASQ,QAAb,CAAsBlC,QAAQ,CAACmC,GAA/B,EAAmCJ,WAAW,CAACK,OAA/C,CAAd;AACA/B,MAAAA,WAAW,CAAC4B,KAAD,CAAX;AACA,YAAMzB,OAAO,EAAb;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAMjB,QAAQ,CAACS,OAAT,CAAiBwB,KAAjB,CAAuBnC,cAAvB,EAAuCoC,IAAvC,EAAlB;AACD,KALD,MAMI;AACFtB,MAAAA,MAAM,CAACO,KAAP,CAAa,oCAAb;AACD;AACF,GAhBD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzDQtB,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import 'react-bootstrap'\nimport React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json'\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState();\n  const [contract, setContract] = useState(\"\");\n\n  useEffect(()=> {\n    loadWeb3();\n    connectBlockChainData();\n  },[]);\n\n  const addUser = async (name, location, email, phone) => {\n    await contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : currentAccount});\n\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n      console.log(\"successfully into first case\");\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      console.log(\"successfully into second case\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  const connectBlockChainData = async() =>{\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    setCurrentAccount(accounts[0]);\n    console.log(currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = new web3.eth.Contract(ModelABI.abi,networkData.address);\n      setContract(Model);\n      await addUser();\n      console.log(await contract.methods.Users(currentAccount).call());\n    }\n    else{\n      window.alert(\"Please switch to Rinkeby Network!!\")\n    }\n  }\n  return (\n    <div className=\"App\">\n\n          Learn React\n\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}