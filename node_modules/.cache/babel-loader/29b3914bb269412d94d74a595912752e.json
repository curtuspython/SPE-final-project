{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport 'react-bootstrap';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Welcome() {\n  _s();\n\n  useEffect(() => {\n    loadWeb3().then(r => {\n      console.log(\"verified the browser support for ehtereum\");\n    });\n    connectBlockChainData().then(r => {\n      console.log(\"Data fecthed from blockchain\");\n    });\n  }, []);\n\n  const getUserStare = async () => {\n    let rvalue = true;\n    await contract.methods.userExist(currentAccount).call().then(function (result) {\n      rvalue = result;\n    });\n    return rvalue;\n  };\n\n  const addUser = async (name, location, email, phone) => {\n    console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\");\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    });\n  };\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  };\n\n  const RegisterUser = async (name, location, email, phone) => {\n    await contract.methods.addUser(name, location, email, phone).send({\n      from: currentAccount\n    }).then(function (result) {\n      console.log(result);\n    });\n  };\n\n  const connectBlockChainData = async () => {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = await new web3.eth.Contract(ModelABI.abi, networkData.address);\n      contract = Model; //const x = await Model.methods.getAllUsers().call()\n\n      console.log(contract); //console.log(x);\n\n      existingUser = await getUserState();\n      console.log(existingUser);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  };\n\n  const RegisterScreenLoader = () => {\n    if (existingUser === true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: currentAccount,\n      Register: RegisterUser,\n      contract: contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: RegisterScreenLoader()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Welcome, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Welcome;\nexport default Welcome;\n\nvar _c;\n\n$RefreshReg$(_c, \"Welcome\");","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useState","useEffect","Web3","ModelABI","RegisterScreen","Welcome","loadWeb3","then","r","console","log","connectBlockChainData","getUserStare","rvalue","contract","methods","userExist","currentAccount","call","result","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","existingUser","getUserState","RegisterScreenLoader"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\n\nfunction Welcome(){\n    useEffect(() => {\n        loadWeb3().then(r=>{console.log(\"verified the browser support for ehtereum\")})\n        connectBlockChainData().then(r => {console.log(\"Data fecthed from blockchain\")})\n    },[]);\n\n    const getUserStare = async()=>{\n        let rvalue = true;\n        await  contract.methods.userExist( currentAccount).call()\n          .then(function (result){\n              rvalue = result;\n          });\n      return rvalue;\n    }\n\n  const addUser = async(name, location, email, phone)=>{\n\n        console.log(\"...............................................................................................................................................................................................................ih655555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\")\n        await  contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  currentAccount});\n\n}\n\n\n  const loadWeb3 = async() => {\n      if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n      } else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n      } else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      }\n  }\n  const RegisterUser = async(name, location, email, phone) =>{\n    await  contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from :  currentAccount}).then(function(result){\n            console.log(result);\n        });\n  }\n\n\n\n  const connectBlockChainData = async()=>{\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n     currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log( currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = await new web3.eth.Contract(ModelABI.abi,networkData.address);\n       contract = Model;\n      //const x = await Model.methods.getAllUsers().call()\n      console.log( contract);\n      //console.log(x);\n       existingUser =await  getUserState();\n      console.log( existingUser);\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  const RegisterScreenLoader = ()=>{\n    if( existingUser === true)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={ currentAccount} Register={ RegisterUser} contract = { contract} />\n\n  }\n\n    return (\n\n        <div className=\"App\">\n            {\n                RegisterScreenLoader()\n            }\n        </div>);\n\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}