{"ast":null,"code":"var _jsxFileName = \"/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js\";\nimport 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport { bool } from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Welcome extends React.Component {\n  componentWillMount() {\n    this.loadWeb3().then(r => {\n      console.log(\"verified the browser support for ehtereum\");\n    });\n    this.connectBlockChainData().then(r => {\n      console.log(\"Data fecthed from blockchain\");\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAccount: '',\n      contract: 0,\n      existingUser: false\n    };\n  }\n\n  async getUserState() {\n    return this.state.existingUser = await this.state.contract.methods.userExist(this.state.currentAccount).call();\n  }\n\n  async addUser(name, location, email, phone) {\n    await this.contract.methods.addUser(name, location, email, phone).send({\n      from: this.currentAccount\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async RegisterUser(name, location, email, phone) {\n    await this.state.contract.methods.addUser(name, location, email, phone).send({\n      from: this.state.currentAccount\n    });\n  }\n\n  async connectBlockChainData() {\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(this.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n\n    if (networkData) {\n      const Model = new web3.eth.Contract(ModelABI.abi, networkData.address);\n      this.state.contract = Model; //setExistingUser(memoizedValue);\n      //console.log(existingUser);\n\n      this.setState({\n        existingUser: this.getUserState()\n      });\n      console.log(this.state.existingUser);\n    } else {\n      window.alert(\"Please switch to Ganache Network!!\");\n    }\n  }\n\n  renderAuthButton() {\n    if (this.state.existingUser == true) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);else return /*#__PURE__*/_jsxDEV(RegisterScreen, {\n      Account: this.state.currentAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Welcome;","map":{"version":3,"sources":["/home/demonwolf/WebstormProjects/SPE-final-project/client/src/App.js"],"names":["React","useEffect","useState","Web3","ModelABI","RegisterScreen","bool","Welcome","Component","componentWillMount","loadWeb3","then","r","console","log","connectBlockChainData","constructor","props","state","currentAccount","contract","existingUser","getUserState","methods","userExist","call","addUser","name","location","email","phone","send","from","window","ethereum","web3","enable","currentProvider","alert","RegisterUser","givenProvider","accounts","eth","getAccounts","networkId","net","getId","networkData","networks","Model","Contract","abi","address","setState","renderAuthButton","render"],"mappings":"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","sourcesContent":["import 'react-bootstrap'\nimport React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport ModelABI from './contracts/Model.json';\nimport RegisterScreen from \"./components/RegisterScreen\";\nimport {bool} from \"prop-types\";\n\nclass Welcome extends React.Component {\n    componentWillMount() {\n        this.loadWeb3().then(r=>{console.log(\"verified the browser support for ehtereum\")})\n        this.connectBlockChainData().then(r => {console.log(\"Data fecthed from blockchain\")})\n    }\n\n  constructor(props)\n    {\n        super(props);\n        this.state = {currentAccount : '', contract : 0,existingUser : false};\n    }\n\n  async getUserState(){\n      return this.state.existingUser =await this.state.contract.methods.userExist(this.state.currentAccount).call();}\n\n  async addUser(name, location, email, phone){\n    await this.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : this.currentAccount});\n\n}\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async RegisterUser(name, location, email, phone){\n    await this.state.contract\n        .methods\n        .addUser(name, location, email, phone)\n        .send({from : this.state.currentAccount});\n  }\n\n\n\n  async connectBlockChainData(){\n    const web3 = await new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.currentAccount = accounts[0];\n    console.log(accounts[0]);\n    console.log(this.currentAccount);\n    const networkId = await web3.eth.net.getId();\n    const networkData = ModelABI.networks[networkId];\n    if(networkData){\n      const Model = new web3.eth.Contract(ModelABI.abi,networkData.address);\n      this.state.contract = Model;\n      //setExistingUser(memoizedValue);\n      //console.log(existingUser);\n        this.setState({existingUser :this.getUserState()});\n        console.log(this.state.existingUser)\n    }\n    else{\n      window.alert(\"Please switch to Ganache Network!!\")\n    }\n  }\n\n  renderAuthButton(){\n    if(this.state.existingUser == true)\n        return <h1>hello</h1>\n    else\n        return <RegisterScreen Account ={this.state.currentAccount} />\n\n  }\n  render()\n{\n    return (\n\n        <div className=\"App\">\n            {\n                this.renderAuthButton()\n            }\n        </div>);\n}\n\n\n}\n\nexport default Welcome;\n"]},"metadata":{},"sourceType":"module"}